<?php

declare(strict_types=1);

namespace ComposerPackages;

use Composer\Package\CompletePackage;
use Composer\Package\PackageInterface;
use Composer\Package\Loader\ArrayLoader;

/**
 * This class is generated by drupol/composer-packages.
 *
 * This file is overwritten at every run of `composer install` or `composer update`.
 */
final class Versions implements \IteratorAggregate
{
    public const ROOT_PACKAGE_NAME = '{{ rootPackageName }}';
    public const GENERATED_AT = {{ generatedAt }};
    private const VERSIONS = {{ versions|export }};
    private const REGEX_VERSIONS = '#^(?|
{% for package, bundles in regex %}
        {{ package }}
    {% for bundleVersion in bundles %}
        {{ bundleVersion }}
    {% endfor %}
    )|
{% endfor %}
    )$#x';

    /**
     * @var Versions
     */
    private static $instance;

    /**
     * Get a package version.
     *
     * @param string $name
     *   The package name.
     *
     * @return null|string
     *   The package version or null if not found.
     */
    public static function get(string $name): ?string
    {
        preg_match(self::REGEX_VERSIONS, $name, $version);
        return $version['MARK'] ?? null;
    }

{% for name, version in versions %}
    /**
     * Get the package "{{ name }}" version.
     *
     * @return string
     *   The package version or null if not found.
     */
    public static function {{ name|camelize }}(): ?string
    {
        return self::VERSIONS['{{ name }}'] ?? null;
    }

{% endfor %}
    /**
     * {@inheritdoc}
     *
     * @return CompletePackage[]|\Generator
     */
    public static function find(callable $callable): \Generator
    {
        $instance = self::getInstance();

        foreach ($instance->getIterator() as $package) {
            if ($callable($package) === true) {
                yield $package;
            }
        }
    }

    /**
     * {@inheritdoc}
     *
     * @return CompletePackage[]|\Generator
     */
    public function getIterator(): \Generator
    {
        foreach (self::VERSIONS as $key => $version) {
            yield $key => $version;
        }
    }

    /**
     * Versions generator as array, keyed by their name.
     *
     * @return array[]|\Generator
     */
    public static function versions(): \Generator
    {
        yield from self::VERSIONS;
    }

    /**
     * Get an instance.
     *
     * @return Versions
     *   An instance of the class.
     */
    private static function getInstance(): self
    {
        if (null !== self::$instance) {
            return self::$instance;
        }

        self::$instance = new self();

        return self::$instance;
    }

    /*
     * When it comes to check upon versions, you cannot rely on the presence of the static generated method.
     * You need a proper handling to avoid a non existing method call.
     * @internal
     */
    public static function __callStatic(string $name, $args)
    {
        return null;
    }
}
